// Code generated by pggen. DO NOT EDIT.

package queries

import (
	"context"
	"fmt"
	"github.com/jackc/pgconn"
	"github.com/jackc/pgtype"
	"github.com/jackc/pgx/v4"
	"time"
)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	// CreateEventTypes inserts event types into the database
	CreateEventTypes(ctx context.Context, eventTypes []NewEventType) ([]CreateEventTypesRow, error)

	// CreateApplications inserts applications into the database
	CreateApplications(ctx context.Context, eventTypes []NewApplication) ([]CreateApplicationsRow, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn   // underlying Postgres transport to use
	types *typeResolver // resolve types by name
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn genericConn) *DBQuerier {
	return &DBQuerier{conn: conn, types: newTypeResolver()}
}

// NewApplication represents the Postgres composite type "new_application".
type NewApplication struct {
	TenantID  string       `json:"tenant_id"`
	RateLimit *int32       `json:"rate_limit"`
	Metadata  pgtype.JSONB `json:"metadata"`
}

// NewEventType represents the Postgres composite type "new_event_type".
type NewEventType struct {
	Key string `json:"key"`
}

// typeResolver looks up the pgtype.ValueTranscoder by Postgres type name.
type typeResolver struct {
	connInfo *pgtype.ConnInfo // types by Postgres type name
}

func newTypeResolver() *typeResolver {
	ci := pgtype.NewConnInfo()
	return &typeResolver{connInfo: ci}
}

// findValue find the OID, and pgtype.ValueTranscoder for a Postgres type name.
func (tr *typeResolver) findValue(name string) (uint32, pgtype.ValueTranscoder, bool) {
	typ, ok := tr.connInfo.DataTypeForName(name)
	if !ok {
		return 0, nil, false
	}
	v := pgtype.NewValue(typ.Value)
	return typ.OID, v.(pgtype.ValueTranscoder), true
}

// setValue sets the value of a ValueTranscoder to a value that should always
// work and panics if it fails.
func (tr *typeResolver) setValue(vt pgtype.ValueTranscoder, val interface{}) pgtype.ValueTranscoder {
	if err := vt.Set(val); err != nil {
		panic(fmt.Sprintf("set ValueTranscoder %T to %+v: %s", vt, val, err))
	}
	return vt
}

type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultVal pgtype.ValueTranscoder // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	fs := make([]pgtype.CompositeTypeField, len(fields))
	vals := make([]pgtype.ValueTranscoder, len(fields))
	isBinaryOk := true
	for i, field := range fields {
		oid, val, ok := tr.findValue(field.typeName)
		if !ok {
			oid = unknownOID
			val = field.defaultVal
		}
		isBinaryOk = isBinaryOk && oid != unknownOID
		fs[i] = pgtype.CompositeTypeField{Name: field.name, OID: oid}
		vals[i] = val
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	typ, _ := pgtype.NewCompositeTypeValues(name, fs, vals)
	if !isBinaryOk {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.ValueTranscoder {
	if _, val, ok := tr.findValue(name); ok {
		return val
	}
	elemOID, elemVal, ok := tr.findValue(elemName)
	elemValFunc := func() pgtype.ValueTranscoder {
		return pgtype.NewValue(elemVal).(pgtype.ValueTranscoder)
	}
	if !ok {
		elemOID = unknownOID
		elemValFunc = defaultVal
	}
	typ := pgtype.NewArrayType(name, elemOID, elemValFunc)
	if elemOID == unknownOID {
		return textPreferrer{ValueTranscoder: typ, typeName: name}
	}
	return typ
}

// newNewApplication creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'new_application'.
func (tr *typeResolver) newNewApplication() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"new_application",
		compositeField{name: "tenant_id", typeName: "text", defaultVal: &pgtype.Text{}},
		compositeField{name: "rate_limit", typeName: "int4", defaultVal: &pgtype.Int4{}},
		compositeField{name: "metadata", typeName: "jsonb", defaultVal: &pgtype.JSONB{}},
	)
}

// newNewApplicationRaw returns all composite fields for the Postgres composite
// type 'new_application' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newNewApplicationRaw(v NewApplication) []interface{} {
	return []interface{}{
		v.TenantID,
		v.RateLimit,
		v.Metadata,
	}
}

// newNewEventType creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'new_event_type'.
func (tr *typeResolver) newNewEventType() pgtype.ValueTranscoder {
	return tr.newCompositeValue(
		"new_event_type",
		compositeField{name: "key", typeName: "text", defaultVal: &pgtype.Text{}},
	)
}

// newNewEventTypeRaw returns all composite fields for the Postgres composite
// type 'new_event_type' as a slice of interface{} to encode query parameters.
func (tr *typeResolver) newNewEventTypeRaw(v NewEventType) []interface{} {
	return []interface{}{
		v.Key,
	}
}

// newNewApplicationArray creates a new pgtype.ValueTranscoder for the Postgres
// '_new_application' array type.
func (tr *typeResolver) newNewApplicationArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_new_application", "new_application", tr.newNewApplication)
}

// newNewApplicationArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_new_application' to encode query parameters.
func (tr *typeResolver) newNewApplicationArrayInit(ps []NewApplication) pgtype.ValueTranscoder {
	dec := tr.newNewApplicationArray()
	if err := dec.Set(tr.newNewApplicationArrayRaw(ps)); err != nil {
		panic("encode []NewApplication: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_new_application"}
}

// newNewApplicationArrayRaw returns all elements for the Postgres array type '_new_application'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newNewApplicationArrayRaw(vs []NewApplication) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newNewApplicationRaw(v)
	}
	return elems
}

// newNewEventTypeArray creates a new pgtype.ValueTranscoder for the Postgres
// '_new_event_type' array type.
func (tr *typeResolver) newNewEventTypeArray() pgtype.ValueTranscoder {
	return tr.newArrayValue("_new_event_type", "new_event_type", tr.newNewEventType)
}

// newNewEventTypeArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_new_event_type' to encode query parameters.
func (tr *typeResolver) newNewEventTypeArrayInit(ps []NewEventType) pgtype.ValueTranscoder {
	dec := tr.newNewEventTypeArray()
	if err := dec.Set(tr.newNewEventTypeArrayRaw(ps)); err != nil {
		panic("encode []NewEventType: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_new_event_type"}
}

// newNewEventTypeArrayRaw returns all elements for the Postgres array type '_new_event_type'
// as a slice of interface{} for use with the pgtype.Value Set method.
func (tr *typeResolver) newNewEventTypeArrayRaw(vs []NewEventType) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newNewEventTypeRaw(v)
	}
	return elems
}

const createEventTypesSQL = `INSERT INTO webhooks.event_type (
    key
) 
SELECT 
    u.key
FROM unnest($1::webhooks.new_event_type[]) u
ON CONFLICT DO NOTHING
RETURNING 
    id,
    uid,
    key,
    created_at;`

type CreateEventTypesRow struct {
	ID        int32     `json:"id"`
	Uid       string    `json:"uid"`
	Key       string    `json:"key"`
	CreatedAt time.Time `json:"created_at"`
}

// CreateEventTypes implements Querier.CreateEventTypes.
func (q *DBQuerier) CreateEventTypes(ctx context.Context, eventTypes []NewEventType) ([]CreateEventTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateEventTypes")
	rows, err := q.conn.Query(ctx, createEventTypesSQL, q.types.newNewEventTypeArrayInit(eventTypes))
	if err != nil {
		return nil, fmt.Errorf("query CreateEventTypes: %w", err)
	}
	defer rows.Close()
	items := []CreateEventTypesRow{}
	for rows.Next() {
		var item CreateEventTypesRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.Key, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateEventTypes row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateEventTypes rows: %w", err)
	}
	return items, err
}

const createApplicationsSQL = `INSERT INTO webhooks.application (
    tenant_id,
    rate_limit,
    metadata
) 
SELECT 
    u.tenant_id,
    u.rate_limit,
    u.metadata
FROM unnest($1::webhooks.new_application[]) u
ON CONFLICT DO NOTHING
RETURNING 
    id,
    uid,
    tenant_id,
    rate_limit,
    metadata,
    created_at;`

type CreateApplicationsRow struct {
	ID        int32        `json:"id"`
	Uid       string       `json:"uid"`
	TenantID  string       `json:"tenant_id"`
	RateLimit int32        `json:"rate_limit"`
	Metadata  pgtype.JSONB `json:"metadata"`
	CreatedAt time.Time    `json:"created_at"`
}

// CreateApplications implements Querier.CreateApplications.
func (q *DBQuerier) CreateApplications(ctx context.Context, eventTypes []NewApplication) ([]CreateApplicationsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateApplications")
	rows, err := q.conn.Query(ctx, createApplicationsSQL, q.types.newNewApplicationArrayInit(eventTypes))
	if err != nil {
		return nil, fmt.Errorf("query CreateApplications: %w", err)
	}
	defer rows.Close()
	items := []CreateApplicationsRow{}
	for rows.Next() {
		var item CreateApplicationsRow
		if err := rows.Scan(&item.ID, &item.Uid, &item.TenantID, &item.RateLimit, &item.Metadata, &item.CreatedAt); err != nil {
			return nil, fmt.Errorf("scan CreateApplications row: %w", err)
		}
		items = append(items, item)
	}
	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("close CreateApplications rows: %w", err)
	}
	return items, err
}

// textPreferrer wraps a pgtype.ValueTranscoder and sets the preferred encoding
// format to text instead binary (the default). pggen uses the text format
// when the OID is unknownOID because the binary format requires the OID.
// Typically occurs for unregistered types.
type textPreferrer struct {
	pgtype.ValueTranscoder
	typeName string
}

// PreferredParamFormat implements pgtype.ParamFormatPreferrer.
func (t textPreferrer) PreferredParamFormat() int16 { return pgtype.TextFormatCode }

func (t textPreferrer) NewTypeValue() pgtype.Value {
	return textPreferrer{ValueTranscoder: pgtype.NewValue(t.ValueTranscoder).(pgtype.ValueTranscoder), typeName: t.typeName}
}

func (t textPreferrer) TypeName() string {
	return t.typeName
}

// unknownOID means we don't know the OID for a type. This is okay for decoding
// because pgx call DecodeText or DecodeBinary without requiring the OID. For
// encoding parameters, pggen uses textPreferrer if the OID is unknown.
const unknownOID = 0
