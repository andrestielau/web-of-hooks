// Package webhooksv1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.1.0 DO NOT EDIT.
package webhooksv1

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
)

// Attempt defines model for Attempt.
type Attempt struct {
	Id *string `json:"id,omitempty"`
}

// Endpoint defines model for Endpoint.
type Endpoint struct {
	Channels    *[]string `json:"channels,omitempty"`
	Description *string   `json:"description,omitempty"`
	FilterTypes *[]string `json:"filterTypes,omitempty"`
	Name        *string   `json:"name,omitempty"`
	RateLimit   *int      `json:"rateLimit,omitempty"`
	Uid         string    `json:"uid"`
	Url         string    `json:"url"`
}

// Error defines model for Error.
type Error struct {
	Cause string  `json:"cause"`
	Code  int     `json:"code"`
	Index *string `json:"index,omitempty"`
}

// EventType Type of Messages that you can receive in your Endpoints.
type EventType struct {
	Id *string `json:"id,omitempty"`
}

// Message defines model for Message.
type Message struct {
	Id *string `json:"id,omitempty"`
}

// NewAttempt defines model for NewAttempt.
type NewAttempt struct {
	Id *string `json:"id,omitempty"`
}

// NewEndpoint The URL you can receive WebHooks at.read
type NewEndpoint struct {
	Channels    *[]string `json:"channels,omitempty"`
	Description *string   `json:"description,omitempty"`
	FilterTypes *[]string `json:"filterTypes,omitempty"`
	Name        *string   `json:"name,omitempty"`
	RateLimit   *int      `json:"rateLimit,omitempty"`
	Secret      *string   `json:"secret,omitempty"`
	Uid         *string   `json:"uid,omitempty"`
	Url         string    `json:"url"`
}

// NewMessage defines model for NewMessage.
type NewMessage struct {
	Id *string `json:"id,omitempty"`
}

// PageInfo defines model for PageInfo.
type PageInfo struct {
	Done bool    `json:"done"`
	Next *string `json:"next,omitempty"`
	Prev *string `json:"prev,omitempty"`
}

// Statistics defines model for Statistics.
type Statistics struct {
	Id *string `json:"id,omitempty"`
}

// AttemptId defines model for attemptId.
type AttemptId = string

// Cursor defines model for cursor.
type Cursor = string

// EndpointId defines model for endpointId.
type EndpointId = string

// Force defines model for force.
type Force = bool

// Limit defines model for limit.
type Limit = int

// MessageId defines model for messageId.
type MessageId = string

// Reverse defines model for reverse.
type Reverse = bool

// AttemptList defines model for AttemptList.
type AttemptList struct {
	Data []Attempt `json:"data"`
	Page PageInfo  `json:"page"`
}

// EndpointList defines model for EndpointList.
type EndpointList struct {
	Data []Endpoint `json:"data"`
	Page PageInfo   `json:"page"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	Errors []Error `json:"errors"`
}

// ErrorOut defines model for ErrorOut.
type ErrorOut struct {
	Error *Error `json:"error,omitempty"`
}

// EventTypeList defines model for EventTypeList.
type EventTypeList struct {
	Data []EventType `json:"data"`
	Page PageInfo    `json:"page"`
}

// MessageList defines model for MessageList.
type MessageList struct {
	Data []Message `json:"data"`
	Page PageInfo  `json:"page"`
}

// StatisticsOut defines model for StatisticsOut.
type StatisticsOut = Statistics

// CreateAttemptsPayload defines model for CreateAttemptsPayload.
type CreateAttemptsPayload = []NewAttempt

// CreateEndpointsPayload defines model for CreateEndpointsPayload.
type CreateEndpointsPayload = []NewEndpoint

// CreateMessagesPayload defines model for CreateMessagesPayload.
type CreateMessagesPayload = []NewMessage

// DeleteAttemptsPayload defines model for DeleteAttemptsPayload.
type DeleteAttemptsPayload = []string

// DeleteEndpointsPayload defines model for DeleteEndpointsPayload.
type DeleteEndpointsPayload = []struct {
	Id     *string `json:"id,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// DeleteMessagesPayload defines model for DeleteMessagesPayload.
type DeleteMessagesPayload = []string

// DeleteAttemptsJSONBody defines parameters for DeleteAttempts.
type DeleteAttemptsJSONBody = []string

// DeleteAttemptsParams defines parameters for DeleteAttempts.
type DeleteAttemptsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListAttemptsParams defines parameters for ListAttempts.
type ListAttemptsParams struct {
	Limit *Limit `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateAttemptsJSONBody defines parameters for CreateAttempts.
type CreateAttemptsJSONBody = []NewAttempt

// CreateAttemptsParams defines parameters for CreateAttempts.
type CreateAttemptsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// DeleteAttemptParams defines parameters for DeleteAttempt.
type DeleteAttemptParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// CreateAttemptParams defines parameters for CreateAttempt.
type CreateAttemptParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// DisableEndpointsJSONBody defines parameters for DisableEndpoints.
type DisableEndpointsJSONBody = []struct {
	Id     *string `json:"id,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// DisableEndpointsParams defines parameters for DisableEndpoints.
type DisableEndpointsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListEndpointsParams defines parameters for ListEndpoints.
type ListEndpointsParams struct {
	Limit   *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	Reverse *Reverse `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// CreateEndpointsJSONBody defines parameters for CreateEndpoints.
type CreateEndpointsJSONBody = []NewEndpoint

// DeleteEndpointParams defines parameters for DeleteEndpoint.
type DeleteEndpointParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// DeleteEndpointAttemptsJSONBody defines parameters for DeleteEndpointAttempts.
type DeleteEndpointAttemptsJSONBody = []string

// DeleteEndpointAttemptsParams defines parameters for DeleteEndpointAttempts.
type DeleteEndpointAttemptsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListEndpointAttemprParams defines parameters for ListEndpointAttempr.
type ListEndpointAttemprParams struct {
	Limit   *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	Reverse *Reverse `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// CreateEndpointAttemptsJSONBody defines parameters for CreateEndpointAttempts.
type CreateEndpointAttemptsJSONBody = []NewAttempt

// CreateEndpointAttemptsParams defines parameters for CreateEndpointAttempts.
type CreateEndpointAttemptsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// RotateEndpointSecretJSONBody defines parameters for RotateEndpointSecret.
type RotateEndpointSecretJSONBody = string

// ListEventTypesParams defines parameters for ListEventTypes.
type ListEventTypesParams struct {
	Limit   *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	Reverse *Reverse `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// DeleteMessagesJSONBody defines parameters for DeleteMessages.
type DeleteMessagesJSONBody = []string

// DeleteMessagesParams defines parameters for DeleteMessages.
type DeleteMessagesParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListMessagesParams defines parameters for ListMessages.
type ListMessagesParams struct {
	Limit   *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	Reverse *Reverse `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// CreateMessagesJSONBody defines parameters for CreateMessages.
type CreateMessagesJSONBody = []NewMessage

// CreateMessagesParams defines parameters for CreateMessages.
type CreateMessagesParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// DeleteMessageParams defines parameters for DeleteMessage.
type DeleteMessageParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// CreateMessageParams defines parameters for CreateMessage.
type CreateMessageParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// DeleteMessageAttemptsJSONBody defines parameters for DeleteMessageAttempts.
type DeleteMessageAttemptsJSONBody = []string

// DeleteMessageAttemptsParams defines parameters for DeleteMessageAttempts.
type DeleteMessageAttemptsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// ListMessageAttemptsParams defines parameters for ListMessageAttempts.
type ListMessageAttemptsParams struct {
	Limit   *Limit   `form:"limit,omitempty" json:"limit,omitempty"`
	Cursor  *Cursor  `form:"cursor,omitempty" json:"cursor,omitempty"`
	Reverse *Reverse `form:"reverse,omitempty" json:"reverse,omitempty"`
}

// CreateMessagesAttemptsJSONBody defines parameters for CreateMessagesAttempts.
type CreateMessagesAttemptsJSONBody = []NewAttempt

// CreateMessagesAttemptsParams defines parameters for CreateMessagesAttempts.
type CreateMessagesAttemptsParams struct {
	Force *Force `form:"force,omitempty" json:"force,omitempty"`
}

// DeleteAttemptsJSONRequestBody defines body for DeleteAttempts for application/json ContentType.
type DeleteAttemptsJSONRequestBody = DeleteAttemptsJSONBody

// CreateAttemptsJSONRequestBody defines body for CreateAttempts for application/json ContentType.
type CreateAttemptsJSONRequestBody = CreateAttemptsJSONBody

// CreateAttemptJSONRequestBody defines body for CreateAttempt for application/json ContentType.
type CreateAttemptJSONRequestBody = NewAttempt

// DisableEndpointsJSONRequestBody defines body for DisableEndpoints for application/json ContentType.
type DisableEndpointsJSONRequestBody = DisableEndpointsJSONBody

// CreateEndpointsJSONRequestBody defines body for CreateEndpoints for application/json ContentType.
type CreateEndpointsJSONRequestBody = CreateEndpointsJSONBody

// DeleteEndpointAttemptsJSONRequestBody defines body for DeleteEndpointAttempts for application/json ContentType.
type DeleteEndpointAttemptsJSONRequestBody = DeleteEndpointAttemptsJSONBody

// CreateEndpointAttemptsJSONRequestBody defines body for CreateEndpointAttempts for application/json ContentType.
type CreateEndpointAttemptsJSONRequestBody = CreateEndpointAttemptsJSONBody

// RotateEndpointSecretJSONRequestBody defines body for RotateEndpointSecret for application/json ContentType.
type RotateEndpointSecretJSONRequestBody = RotateEndpointSecretJSONBody

// DeleteMessagesJSONRequestBody defines body for DeleteMessages for application/json ContentType.
type DeleteMessagesJSONRequestBody = DeleteMessagesJSONBody

// CreateMessagesJSONRequestBody defines body for CreateMessages for application/json ContentType.
type CreateMessagesJSONRequestBody = CreateMessagesJSONBody

// CreateMessageJSONRequestBody defines body for CreateMessage for application/json ContentType.
type CreateMessageJSONRequestBody = NewMessage

// DeleteMessageAttemptsJSONRequestBody defines body for DeleteMessageAttempts for application/json ContentType.
type DeleteMessageAttemptsJSONRequestBody = DeleteMessageAttemptsJSONBody

// CreateMessagesAttemptsJSONRequestBody defines body for CreateMessagesAttempts for application/json ContentType.
type CreateMessagesAttemptsJSONRequestBody = CreateMessagesAttemptsJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteAttemptsWithBody request with any body
	DeleteAttemptsWithBody(ctx context.Context, params *DeleteAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteAttempts(ctx context.Context, params *DeleteAttemptsParams, body DeleteAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAttempts request
	ListAttempts(ctx context.Context, params *ListAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAttemptsWithBody request with any body
	CreateAttemptsWithBody(ctx context.Context, params *CreateAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAttempts(ctx context.Context, params *CreateAttemptsParams, body CreateAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAttempt request
	DeleteAttempt(ctx context.Context, attemptId AttemptId, params *DeleteAttemptParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAttempt request
	GetAttempt(ctx context.Context, attemptId AttemptId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAttemptWithBody request with any body
	CreateAttemptWithBody(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAttempt(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, body CreateAttemptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DisableEndpointsWithBody request with any body
	DisableEndpointsWithBody(ctx context.Context, params *DisableEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DisableEndpoints(ctx context.Context, params *DisableEndpointsParams, body DisableEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpoints request
	ListEndpoints(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEndpointsWithBody request with any body
	CreateEndpointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEndpoints(ctx context.Context, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEndpoint request
	DeleteEndpoint(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEndpoint request
	GetEndpoint(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateEndpoint request
	UpdateEndpoint(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteEndpointAttemptsWithBody request with any body
	DeleteEndpointAttemptsWithBody(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteEndpointAttempts(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, body DeleteEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEndpointAttempr request
	ListEndpointAttempr(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemprParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateEndpointAttemptsWithBody request with any body
	CreateEndpointAttemptsWithBody(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateEndpointAttempts(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, body CreateEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEndpointSecret request
	GetEndpointSecret(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RotateEndpointSecretWithBody request with any body
	RotateEndpointSecretWithBody(ctx context.Context, endpointId EndpointId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	RotateEndpointSecret(ctx context.Context, endpointId EndpointId, body RotateEndpointSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetEndpointStats request
	GetEndpointStats(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListEventTypes request
	ListEventTypes(ctx context.Context, params *ListEventTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Jwks request
	Jwks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessagesWithBody request with any body
	DeleteMessagesWithBody(ctx context.Context, params *DeleteMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteMessages(ctx context.Context, params *DeleteMessagesParams, body DeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessages request
	ListMessages(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessagesWithBody request with any body
	CreateMessagesWithBody(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessages(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessage request
	DeleteMessage(ctx context.Context, messageId MessageId, params *DeleteMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMessage request
	GetMessage(ctx context.Context, messageId MessageId, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessageWithBody request with any body
	CreateMessageWithBody(ctx context.Context, messageId MessageId, params *CreateMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessage(ctx context.Context, messageId MessageId, params *CreateMessageParams, body CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessageAttemptsWithBody request with any body
	DeleteMessageAttemptsWithBody(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteMessageAttempts(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, body DeleteMessageAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessageAttempts request
	ListMessageAttempts(ctx context.Context, messageId MessageId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessagesAttemptsWithBody request with any body
	CreateMessagesAttemptsWithBody(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMessagesAttempts(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, body CreateMessagesAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetStats request
	GetStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteAttemptsWithBody(ctx context.Context, params *DeleteAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttemptsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttempts(ctx context.Context, params *DeleteAttemptsParams, body DeleteAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttemptsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAttempts(ctx context.Context, params *ListAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAttemptsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttemptsWithBody(ctx context.Context, params *CreateAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttemptsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttempts(ctx context.Context, params *CreateAttemptsParams, body CreateAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttemptsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAttempt(ctx context.Context, attemptId AttemptId, params *DeleteAttemptParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAttemptRequest(c.Server, attemptId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAttempt(ctx context.Context, attemptId AttemptId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAttemptRequest(c.Server, attemptId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttemptWithBody(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttemptRequestWithBody(c.Server, attemptId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAttempt(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, body CreateAttemptJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAttemptRequest(c.Server, attemptId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableEndpointsWithBody(ctx context.Context, params *DisableEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableEndpointsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DisableEndpoints(ctx context.Context, params *DisableEndpointsParams, body DisableEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDisableEndpointsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpoints(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpoints(ctx context.Context, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpoint(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEndpoint(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointRequest(c.Server, endpointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateEndpoint(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateEndpointRequest(c.Server, endpointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpointAttemptsWithBody(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointAttemptsRequestWithBody(c.Server, endpointId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteEndpointAttempts(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, body DeleteEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteEndpointAttemptsRequest(c.Server, endpointId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEndpointAttempr(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemprParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEndpointAttemprRequest(c.Server, endpointId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpointAttemptsWithBody(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointAttemptsRequestWithBody(c.Server, endpointId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateEndpointAttempts(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, body CreateEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateEndpointAttemptsRequest(c.Server, endpointId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEndpointSecret(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointSecretRequest(c.Server, endpointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateEndpointSecretWithBody(ctx context.Context, endpointId EndpointId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateEndpointSecretRequestWithBody(c.Server, endpointId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RotateEndpointSecret(ctx context.Context, endpointId EndpointId, body RotateEndpointSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRotateEndpointSecretRequest(c.Server, endpointId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetEndpointStats(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetEndpointStatsRequest(c.Server, endpointId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListEventTypes(ctx context.Context, params *ListEventTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListEventTypesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Jwks(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewJwksRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessagesWithBody(ctx context.Context, params *DeleteMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessagesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessages(ctx context.Context, params *DeleteMessagesParams, body DeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessagesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessages(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessagesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessagesWithBody(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessagesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessages(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessagesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessage(ctx context.Context, messageId MessageId, params *DeleteMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageRequest(c.Server, messageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMessage(ctx context.Context, messageId MessageId, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMessageRequest(c.Server, messageId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWithBody(ctx context.Context, messageId MessageId, params *CreateMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRequestWithBody(c.Server, messageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessage(ctx context.Context, messageId MessageId, params *CreateMessageParams, body CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRequest(c.Server, messageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageAttemptsWithBody(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageAttemptsRequestWithBody(c.Server, messageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessageAttempts(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, body DeleteMessageAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageAttemptsRequest(c.Server, messageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessageAttempts(ctx context.Context, messageId MessageId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessageAttemptsRequest(c.Server, messageId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessagesAttemptsWithBody(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessagesAttemptsRequestWithBody(c.Server, messageId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessagesAttempts(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, body CreateMessagesAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessagesAttemptsRequest(c.Server, messageId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetStats(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetStatsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteAttemptsRequest calls the generic DeleteAttempts builder with application/json body
func NewDeleteAttemptsRequest(server string, params *DeleteAttemptsParams, body DeleteAttemptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteAttemptsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteAttemptsRequestWithBody generates requests for DeleteAttempts with any type of body
func NewDeleteAttemptsRequestWithBody(server string, params *DeleteAttemptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attempts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAttemptsRequest generates requests for ListAttempts
func NewListAttemptsRequest(server string, params *ListAttemptsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attempts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAttemptsRequest calls the generic CreateAttempts builder with application/json body
func NewCreateAttemptsRequest(server string, params *CreateAttemptsParams, body CreateAttemptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAttemptsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateAttemptsRequestWithBody generates requests for CreateAttempts with any type of body
func NewCreateAttemptsRequestWithBody(server string, params *CreateAttemptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attempts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteAttemptRequest generates requests for DeleteAttempt
func NewDeleteAttemptRequest(server string, attemptId AttemptId, params *DeleteAttemptParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attempts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAttemptRequest generates requests for GetAttempt
func NewGetAttemptRequest(server string, attemptId AttemptId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attempts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAttemptRequest calls the generic CreateAttempt builder with application/json body
func NewCreateAttemptRequest(server string, attemptId AttemptId, params *CreateAttemptParams, body CreateAttemptJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAttemptRequestWithBody(server, attemptId, params, "application/json", bodyReader)
}

// NewCreateAttemptRequestWithBody generates requests for CreateAttempt with any type of body
func NewCreateAttemptRequestWithBody(server string, attemptId AttemptId, params *CreateAttemptParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "attemptId", runtime.ParamLocationPath, attemptId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/attempts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDisableEndpointsRequest calls the generic DisableEndpoints builder with application/json body
func NewDisableEndpointsRequest(server string, params *DisableEndpointsParams, body DisableEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDisableEndpointsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDisableEndpointsRequestWithBody generates requests for DisableEndpoints with any type of body
func NewDisableEndpointsRequestWithBody(server string, params *DisableEndpointsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEndpointsRequest generates requests for ListEndpoints
func NewListEndpointsRequest(server string, params *ListEndpointsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEndpointsRequest calls the generic CreateEndpoints builder with application/json body
func NewCreateEndpointsRequest(server string, body CreateEndpointsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEndpointsRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateEndpointsRequestWithBody generates requests for CreateEndpoints with any type of body
func NewCreateEndpointsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteEndpointRequest generates requests for DeleteEndpoint
func NewDeleteEndpointRequest(server string, endpointId EndpointId, params *DeleteEndpointParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetEndpointRequest generates requests for GetEndpoint
func NewGetEndpointRequest(server string, endpointId EndpointId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateEndpointRequest generates requests for UpdateEndpoint
func NewUpdateEndpointRequest(server string, endpointId EndpointId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteEndpointAttemptsRequest calls the generic DeleteEndpointAttempts builder with application/json body
func NewDeleteEndpointAttemptsRequest(server string, endpointId EndpointId, params *DeleteEndpointAttemptsParams, body DeleteEndpointAttemptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteEndpointAttemptsRequestWithBody(server, endpointId, params, "application/json", bodyReader)
}

// NewDeleteEndpointAttemptsRequestWithBody generates requests for DeleteEndpointAttempts with any type of body
func NewDeleteEndpointAttemptsRequestWithBody(server string, endpointId EndpointId, params *DeleteEndpointAttemptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListEndpointAttemprRequest generates requests for ListEndpointAttempr
func NewListEndpointAttemprRequest(server string, endpointId EndpointId, params *ListEndpointAttemprParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateEndpointAttemptsRequest calls the generic CreateEndpointAttempts builder with application/json body
func NewCreateEndpointAttemptsRequest(server string, endpointId EndpointId, params *CreateEndpointAttemptsParams, body CreateEndpointAttemptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateEndpointAttemptsRequestWithBody(server, endpointId, params, "application/json", bodyReader)
}

// NewCreateEndpointAttemptsRequestWithBody generates requests for CreateEndpointAttempts with any type of body
func NewCreateEndpointAttemptsRequestWithBody(server string, endpointId EndpointId, params *CreateEndpointAttemptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEndpointSecretRequest generates requests for GetEndpointSecret
func NewGetEndpointSecretRequest(server string, endpointId EndpointId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/secret", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewRotateEndpointSecretRequest calls the generic RotateEndpointSecret builder with application/json body
func NewRotateEndpointSecretRequest(server string, endpointId EndpointId, body RotateEndpointSecretJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewRotateEndpointSecretRequestWithBody(server, endpointId, "application/json", bodyReader)
}

// NewRotateEndpointSecretRequestWithBody generates requests for RotateEndpointSecret with any type of body
func NewRotateEndpointSecretRequestWithBody(server string, endpointId EndpointId, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/secret", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetEndpointStatsRequest generates requests for GetEndpointStats
func NewGetEndpointStatsRequest(server string, endpointId EndpointId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "endpointId", runtime.ParamLocationPath, endpointId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/endpoints/%s/stats", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListEventTypesRequest generates requests for ListEventTypes
func NewListEventTypesRequest(server string, params *ListEventTypesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/event-types")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewJwksRequest generates requests for Jwks
func NewJwksRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/jwks.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMessagesRequest calls the generic DeleteMessages builder with application/json body
func NewDeleteMessagesRequest(server string, params *DeleteMessagesParams, body DeleteMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteMessagesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteMessagesRequestWithBody generates requests for DeleteMessages with any type of body
func NewDeleteMessagesRequestWithBody(server string, params *DeleteMessagesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMessagesRequest generates requests for ListMessages
func NewListMessagesRequest(server string, params *ListMessagesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMessagesRequest calls the generic CreateMessages builder with application/json body
func NewCreateMessagesRequest(server string, params *CreateMessagesParams, body CreateMessagesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessagesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewCreateMessagesRequestWithBody generates requests for CreateMessages with any type of body
func NewCreateMessagesRequestWithBody(server string, params *CreateMessagesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMessageRequest generates requests for DeleteMessage
func NewDeleteMessageRequest(server string, messageId MessageId, params *DeleteMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMessageRequest generates requests for GetMessage
func NewGetMessageRequest(server string, messageId MessageId) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMessageRequest calls the generic CreateMessage builder with application/json body
func NewCreateMessageRequest(server string, messageId MessageId, params *CreateMessageParams, body CreateMessageJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessageRequestWithBody(server, messageId, params, "application/json", bodyReader)
}

// NewCreateMessageRequestWithBody generates requests for CreateMessage with any type of body
func NewCreateMessageRequestWithBody(server string, messageId MessageId, params *CreateMessageParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMessageAttemptsRequest calls the generic DeleteMessageAttempts builder with application/json body
func NewDeleteMessageAttemptsRequest(server string, messageId MessageId, params *DeleteMessageAttemptsParams, body DeleteMessageAttemptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteMessageAttemptsRequestWithBody(server, messageId, params, "application/json", bodyReader)
}

// NewDeleteMessageAttemptsRequestWithBody generates requests for DeleteMessageAttempts with any type of body
func NewDeleteMessageAttemptsRequestWithBody(server string, messageId MessageId, params *DeleteMessageAttemptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMessageAttemptsRequest generates requests for ListMessageAttempts
func NewListMessageAttemptsRequest(server string, messageId MessageId, params *ListMessageAttemptsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Cursor != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cursor", runtime.ParamLocationQuery, *params.Cursor); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Reverse != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reverse", runtime.ParamLocationQuery, *params.Reverse); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMessagesAttemptsRequest calls the generic CreateMessagesAttempts builder with application/json body
func NewCreateMessagesAttemptsRequest(server string, messageId MessageId, params *CreateMessagesAttemptsParams, body CreateMessagesAttemptsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMessagesAttemptsRequestWithBody(server, messageId, params, "application/json", bodyReader)
}

// NewCreateMessagesAttemptsRequestWithBody generates requests for CreateMessagesAttempts with any type of body
func NewCreateMessagesAttemptsRequestWithBody(server string, messageId MessageId, params *CreateMessagesAttemptsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "messageId", runtime.ParamLocationPath, messageId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/messages/%s/attempts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Force != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "force", runtime.ParamLocationQuery, *params.Force); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetStatsRequest generates requests for GetStats
func NewGetStatsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/stats")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteAttemptsWithBodyWithResponse request with any body
	DeleteAttemptsWithBodyWithResponse(ctx context.Context, params *DeleteAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAttemptsResponse, error)

	DeleteAttemptsWithResponse(ctx context.Context, params *DeleteAttemptsParams, body DeleteAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAttemptsResponse, error)

	// ListAttemptsWithResponse request
	ListAttemptsWithResponse(ctx context.Context, params *ListAttemptsParams, reqEditors ...RequestEditorFn) (*ListAttemptsResponse, error)

	// CreateAttemptsWithBodyWithResponse request with any body
	CreateAttemptsWithBodyWithResponse(ctx context.Context, params *CreateAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttemptsResponse, error)

	CreateAttemptsWithResponse(ctx context.Context, params *CreateAttemptsParams, body CreateAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttemptsResponse, error)

	// DeleteAttemptWithResponse request
	DeleteAttemptWithResponse(ctx context.Context, attemptId AttemptId, params *DeleteAttemptParams, reqEditors ...RequestEditorFn) (*DeleteAttemptResponse, error)

	// GetAttemptWithResponse request
	GetAttemptWithResponse(ctx context.Context, attemptId AttemptId, reqEditors ...RequestEditorFn) (*GetAttemptResponse, error)

	// CreateAttemptWithBodyWithResponse request with any body
	CreateAttemptWithBodyWithResponse(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttemptResponse, error)

	CreateAttemptWithResponse(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, body CreateAttemptJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttemptResponse, error)

	// DisableEndpointsWithBodyWithResponse request with any body
	DisableEndpointsWithBodyWithResponse(ctx context.Context, params *DisableEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableEndpointsResponse, error)

	DisableEndpointsWithResponse(ctx context.Context, params *DisableEndpointsParams, body DisableEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableEndpointsResponse, error)

	// ListEndpointsWithResponse request
	ListEndpointsWithResponse(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*ListEndpointsResponse, error)

	// CreateEndpointsWithBodyWithResponse request with any body
	CreateEndpointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error)

	CreateEndpointsWithResponse(ctx context.Context, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error)

	// DeleteEndpointWithResponse request
	DeleteEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*DeleteEndpointResponse, error)

	// GetEndpointWithResponse request
	GetEndpointWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*GetEndpointResponse, error)

	// UpdateEndpointWithResponse request
	UpdateEndpointWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*UpdateEndpointResponse, error)

	// DeleteEndpointAttemptsWithBodyWithResponse request with any body
	DeleteEndpointAttemptsWithBodyWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteEndpointAttemptsResponse, error)

	DeleteEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, body DeleteEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteEndpointAttemptsResponse, error)

	// ListEndpointAttemprWithResponse request
	ListEndpointAttemprWithResponse(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemprParams, reqEditors ...RequestEditorFn) (*ListEndpointAttemprResponse, error)

	// CreateEndpointAttemptsWithBodyWithResponse request with any body
	CreateEndpointAttemptsWithBodyWithResponse(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEndpointAttemptsResponse, error)

	CreateEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, body CreateEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEndpointAttemptsResponse, error)

	// GetEndpointSecretWithResponse request
	GetEndpointSecretWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*GetEndpointSecretResponse, error)

	// RotateEndpointSecretWithBodyWithResponse request with any body
	RotateEndpointSecretWithBodyWithResponse(ctx context.Context, endpointId EndpointId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateEndpointSecretResponse, error)

	RotateEndpointSecretWithResponse(ctx context.Context, endpointId EndpointId, body RotateEndpointSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*RotateEndpointSecretResponse, error)

	// GetEndpointStatsWithResponse request
	GetEndpointStatsWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*GetEndpointStatsResponse, error)

	// ListEventTypesWithResponse request
	ListEventTypesWithResponse(ctx context.Context, params *ListEventTypesParams, reqEditors ...RequestEditorFn) (*ListEventTypesResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)

	// JwksWithResponse request
	JwksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*JwksResponse, error)

	// DeleteMessagesWithBodyWithResponse request with any body
	DeleteMessagesWithBodyWithResponse(ctx context.Context, params *DeleteMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMessagesResponse, error)

	DeleteMessagesWithResponse(ctx context.Context, params *DeleteMessagesParams, body DeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMessagesResponse, error)

	// ListMessagesWithResponse request
	ListMessagesWithResponse(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error)

	// CreateMessagesWithBodyWithResponse request with any body
	CreateMessagesWithBodyWithResponse(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error)

	CreateMessagesWithResponse(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error)

	// DeleteMessageWithResponse request
	DeleteMessageWithResponse(ctx context.Context, messageId MessageId, params *DeleteMessageParams, reqEditors ...RequestEditorFn) (*DeleteMessageResponse, error)

	// GetMessageWithResponse request
	GetMessageWithResponse(ctx context.Context, messageId MessageId, reqEditors ...RequestEditorFn) (*GetMessageResponse, error)

	// CreateMessageWithBodyWithResponse request with any body
	CreateMessageWithBodyWithResponse(ctx context.Context, messageId MessageId, params *CreateMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error)

	CreateMessageWithResponse(ctx context.Context, messageId MessageId, params *CreateMessageParams, body CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error)

	// DeleteMessageAttemptsWithBodyWithResponse request with any body
	DeleteMessageAttemptsWithBodyWithResponse(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMessageAttemptsResponse, error)

	DeleteMessageAttemptsWithResponse(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, body DeleteMessageAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMessageAttemptsResponse, error)

	// ListMessageAttemptsWithResponse request
	ListMessageAttemptsWithResponse(ctx context.Context, messageId MessageId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListMessageAttemptsResponse, error)

	// CreateMessagesAttemptsWithBodyWithResponse request with any body
	CreateMessagesAttemptsWithBodyWithResponse(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessagesAttemptsResponse, error)

	CreateMessagesAttemptsWithResponse(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, body CreateMessagesAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessagesAttemptsResponse, error)

	// GetStatsWithResponse request
	GetStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsResponse, error)
}

type DeleteAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttemptList
}

// Status returns HTTPResponse.Status
func (r ListAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CreateAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAttemptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAttemptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAttemptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAttemptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Attempt
}

// Status returns HTTPResponse.Status
func (r GetAttemptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAttemptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAttemptResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ErrorOut
}

// Status returns HTTPResponse.Status
func (r CreateAttemptResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAttemptResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DisableEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DisableEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DisableEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EndpointList
}

// Status returns HTTPResponse.Status
func (r ListEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEndpointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CreateEndpointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEndpointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Endpoint
}

// Status returns HTTPResponse.Status
func (r GetEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateEndpointResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *ErrorOut
}

// Status returns HTTPResponse.Status
func (r UpdateEndpointResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateEndpointResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteEndpointAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteEndpointAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteEndpointAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEndpointAttemprResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttemptList
}

// Status returns HTTPResponse.Status
func (r ListEndpointAttemprResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEndpointAttemprResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateEndpointAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CreateEndpointAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateEndpointAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEndpointSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetEndpointSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RotateEndpointSecretResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ErrorOut
}

// Status returns HTTPResponse.Status
func (r RotateEndpointSecretResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RotateEndpointSecretResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetEndpointStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatisticsOut
}

// Status returns HTTPResponse.Status
func (r GetEndpointStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetEndpointStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListEventTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EventTypeList
}

// Status returns HTTPResponse.Status
func (r ListEventTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListEventTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type JwksResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r JwksResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r JwksResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MessageList
}

// Status returns HTTPResponse.Status
func (r ListMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessagesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CreateMessagesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessagesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Message
}

// Status returns HTTPResponse.Status
func (r GetMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ErrorOut
}

// Status returns HTTPResponse.Status
func (r CreateMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMessageAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessageAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AttemptList
}

// Status returns HTTPResponse.Status
func (r ListMessageAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessageAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessagesAttemptsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ErrorList
}

// Status returns HTTPResponse.Status
func (r CreateMessagesAttemptsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessagesAttemptsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *StatisticsOut
}

// Status returns HTTPResponse.Status
func (r GetStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteAttemptsWithBodyWithResponse request with arbitrary body returning *DeleteAttemptsResponse
func (c *ClientWithResponses) DeleteAttemptsWithBodyWithResponse(ctx context.Context, params *DeleteAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteAttemptsResponse, error) {
	rsp, err := c.DeleteAttemptsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttemptsResponse(rsp)
}

func (c *ClientWithResponses) DeleteAttemptsWithResponse(ctx context.Context, params *DeleteAttemptsParams, body DeleteAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteAttemptsResponse, error) {
	rsp, err := c.DeleteAttempts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttemptsResponse(rsp)
}

// ListAttemptsWithResponse request returning *ListAttemptsResponse
func (c *ClientWithResponses) ListAttemptsWithResponse(ctx context.Context, params *ListAttemptsParams, reqEditors ...RequestEditorFn) (*ListAttemptsResponse, error) {
	rsp, err := c.ListAttempts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAttemptsResponse(rsp)
}

// CreateAttemptsWithBodyWithResponse request with arbitrary body returning *CreateAttemptsResponse
func (c *ClientWithResponses) CreateAttemptsWithBodyWithResponse(ctx context.Context, params *CreateAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttemptsResponse, error) {
	rsp, err := c.CreateAttemptsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttemptsResponse(rsp)
}

func (c *ClientWithResponses) CreateAttemptsWithResponse(ctx context.Context, params *CreateAttemptsParams, body CreateAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttemptsResponse, error) {
	rsp, err := c.CreateAttempts(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttemptsResponse(rsp)
}

// DeleteAttemptWithResponse request returning *DeleteAttemptResponse
func (c *ClientWithResponses) DeleteAttemptWithResponse(ctx context.Context, attemptId AttemptId, params *DeleteAttemptParams, reqEditors ...RequestEditorFn) (*DeleteAttemptResponse, error) {
	rsp, err := c.DeleteAttempt(ctx, attemptId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAttemptResponse(rsp)
}

// GetAttemptWithResponse request returning *GetAttemptResponse
func (c *ClientWithResponses) GetAttemptWithResponse(ctx context.Context, attemptId AttemptId, reqEditors ...RequestEditorFn) (*GetAttemptResponse, error) {
	rsp, err := c.GetAttempt(ctx, attemptId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAttemptResponse(rsp)
}

// CreateAttemptWithBodyWithResponse request with arbitrary body returning *CreateAttemptResponse
func (c *ClientWithResponses) CreateAttemptWithBodyWithResponse(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAttemptResponse, error) {
	rsp, err := c.CreateAttemptWithBody(ctx, attemptId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttemptResponse(rsp)
}

func (c *ClientWithResponses) CreateAttemptWithResponse(ctx context.Context, attemptId AttemptId, params *CreateAttemptParams, body CreateAttemptJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAttemptResponse, error) {
	rsp, err := c.CreateAttempt(ctx, attemptId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAttemptResponse(rsp)
}

// DisableEndpointsWithBodyWithResponse request with arbitrary body returning *DisableEndpointsResponse
func (c *ClientWithResponses) DisableEndpointsWithBodyWithResponse(ctx context.Context, params *DisableEndpointsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DisableEndpointsResponse, error) {
	rsp, err := c.DisableEndpointsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableEndpointsResponse(rsp)
}

func (c *ClientWithResponses) DisableEndpointsWithResponse(ctx context.Context, params *DisableEndpointsParams, body DisableEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*DisableEndpointsResponse, error) {
	rsp, err := c.DisableEndpoints(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDisableEndpointsResponse(rsp)
}

// ListEndpointsWithResponse request returning *ListEndpointsResponse
func (c *ClientWithResponses) ListEndpointsWithResponse(ctx context.Context, params *ListEndpointsParams, reqEditors ...RequestEditorFn) (*ListEndpointsResponse, error) {
	rsp, err := c.ListEndpoints(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointsResponse(rsp)
}

// CreateEndpointsWithBodyWithResponse request with arbitrary body returning *CreateEndpointsResponse
func (c *ClientWithResponses) CreateEndpointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error) {
	rsp, err := c.CreateEndpointsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointsResponse(rsp)
}

func (c *ClientWithResponses) CreateEndpointsWithResponse(ctx context.Context, body CreateEndpointsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEndpointsResponse, error) {
	rsp, err := c.CreateEndpoints(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointsResponse(rsp)
}

// DeleteEndpointWithResponse request returning *DeleteEndpointResponse
func (c *ClientWithResponses) DeleteEndpointWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointParams, reqEditors ...RequestEditorFn) (*DeleteEndpointResponse, error) {
	rsp, err := c.DeleteEndpoint(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointResponse(rsp)
}

// GetEndpointWithResponse request returning *GetEndpointResponse
func (c *ClientWithResponses) GetEndpointWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*GetEndpointResponse, error) {
	rsp, err := c.GetEndpoint(ctx, endpointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointResponse(rsp)
}

// UpdateEndpointWithResponse request returning *UpdateEndpointResponse
func (c *ClientWithResponses) UpdateEndpointWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*UpdateEndpointResponse, error) {
	rsp, err := c.UpdateEndpoint(ctx, endpointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateEndpointResponse(rsp)
}

// DeleteEndpointAttemptsWithBodyWithResponse request with arbitrary body returning *DeleteEndpointAttemptsResponse
func (c *ClientWithResponses) DeleteEndpointAttemptsWithBodyWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteEndpointAttemptsResponse, error) {
	rsp, err := c.DeleteEndpointAttemptsWithBody(ctx, endpointId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointAttemptsResponse(rsp)
}

func (c *ClientWithResponses) DeleteEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *DeleteEndpointAttemptsParams, body DeleteEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteEndpointAttemptsResponse, error) {
	rsp, err := c.DeleteEndpointAttempts(ctx, endpointId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteEndpointAttemptsResponse(rsp)
}

// ListEndpointAttemprWithResponse request returning *ListEndpointAttemprResponse
func (c *ClientWithResponses) ListEndpointAttemprWithResponse(ctx context.Context, endpointId EndpointId, params *ListEndpointAttemprParams, reqEditors ...RequestEditorFn) (*ListEndpointAttemprResponse, error) {
	rsp, err := c.ListEndpointAttempr(ctx, endpointId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEndpointAttemprResponse(rsp)
}

// CreateEndpointAttemptsWithBodyWithResponse request with arbitrary body returning *CreateEndpointAttemptsResponse
func (c *ClientWithResponses) CreateEndpointAttemptsWithBodyWithResponse(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateEndpointAttemptsResponse, error) {
	rsp, err := c.CreateEndpointAttemptsWithBody(ctx, endpointId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointAttemptsResponse(rsp)
}

func (c *ClientWithResponses) CreateEndpointAttemptsWithResponse(ctx context.Context, endpointId EndpointId, params *CreateEndpointAttemptsParams, body CreateEndpointAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateEndpointAttemptsResponse, error) {
	rsp, err := c.CreateEndpointAttempts(ctx, endpointId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateEndpointAttemptsResponse(rsp)
}

// GetEndpointSecretWithResponse request returning *GetEndpointSecretResponse
func (c *ClientWithResponses) GetEndpointSecretWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*GetEndpointSecretResponse, error) {
	rsp, err := c.GetEndpointSecret(ctx, endpointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointSecretResponse(rsp)
}

// RotateEndpointSecretWithBodyWithResponse request with arbitrary body returning *RotateEndpointSecretResponse
func (c *ClientWithResponses) RotateEndpointSecretWithBodyWithResponse(ctx context.Context, endpointId EndpointId, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*RotateEndpointSecretResponse, error) {
	rsp, err := c.RotateEndpointSecretWithBody(ctx, endpointId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateEndpointSecretResponse(rsp)
}

func (c *ClientWithResponses) RotateEndpointSecretWithResponse(ctx context.Context, endpointId EndpointId, body RotateEndpointSecretJSONRequestBody, reqEditors ...RequestEditorFn) (*RotateEndpointSecretResponse, error) {
	rsp, err := c.RotateEndpointSecret(ctx, endpointId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRotateEndpointSecretResponse(rsp)
}

// GetEndpointStatsWithResponse request returning *GetEndpointStatsResponse
func (c *ClientWithResponses) GetEndpointStatsWithResponse(ctx context.Context, endpointId EndpointId, reqEditors ...RequestEditorFn) (*GetEndpointStatsResponse, error) {
	rsp, err := c.GetEndpointStats(ctx, endpointId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetEndpointStatsResponse(rsp)
}

// ListEventTypesWithResponse request returning *ListEventTypesResponse
func (c *ClientWithResponses) ListEventTypesWithResponse(ctx context.Context, params *ListEventTypesParams, reqEditors ...RequestEditorFn) (*ListEventTypesResponse, error) {
	rsp, err := c.ListEventTypes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListEventTypesResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// JwksWithResponse request returning *JwksResponse
func (c *ClientWithResponses) JwksWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*JwksResponse, error) {
	rsp, err := c.Jwks(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseJwksResponse(rsp)
}

// DeleteMessagesWithBodyWithResponse request with arbitrary body returning *DeleteMessagesResponse
func (c *ClientWithResponses) DeleteMessagesWithBodyWithResponse(ctx context.Context, params *DeleteMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMessagesResponse, error) {
	rsp, err := c.DeleteMessagesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessagesResponse(rsp)
}

func (c *ClientWithResponses) DeleteMessagesWithResponse(ctx context.Context, params *DeleteMessagesParams, body DeleteMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMessagesResponse, error) {
	rsp, err := c.DeleteMessages(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessagesResponse(rsp)
}

// ListMessagesWithResponse request returning *ListMessagesResponse
func (c *ClientWithResponses) ListMessagesWithResponse(ctx context.Context, params *ListMessagesParams, reqEditors ...RequestEditorFn) (*ListMessagesResponse, error) {
	rsp, err := c.ListMessages(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessagesResponse(rsp)
}

// CreateMessagesWithBodyWithResponse request with arbitrary body returning *CreateMessagesResponse
func (c *ClientWithResponses) CreateMessagesWithBodyWithResponse(ctx context.Context, params *CreateMessagesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error) {
	rsp, err := c.CreateMessagesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessagesResponse(rsp)
}

func (c *ClientWithResponses) CreateMessagesWithResponse(ctx context.Context, params *CreateMessagesParams, body CreateMessagesJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessagesResponse, error) {
	rsp, err := c.CreateMessages(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessagesResponse(rsp)
}

// DeleteMessageWithResponse request returning *DeleteMessageResponse
func (c *ClientWithResponses) DeleteMessageWithResponse(ctx context.Context, messageId MessageId, params *DeleteMessageParams, reqEditors ...RequestEditorFn) (*DeleteMessageResponse, error) {
	rsp, err := c.DeleteMessage(ctx, messageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageResponse(rsp)
}

// GetMessageWithResponse request returning *GetMessageResponse
func (c *ClientWithResponses) GetMessageWithResponse(ctx context.Context, messageId MessageId, reqEditors ...RequestEditorFn) (*GetMessageResponse, error) {
	rsp, err := c.GetMessage(ctx, messageId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMessageResponse(rsp)
}

// CreateMessageWithBodyWithResponse request with arbitrary body returning *CreateMessageResponse
func (c *ClientWithResponses) CreateMessageWithBodyWithResponse(ctx context.Context, messageId MessageId, params *CreateMessageParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error) {
	rsp, err := c.CreateMessageWithBody(ctx, messageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageResponse(rsp)
}

func (c *ClientWithResponses) CreateMessageWithResponse(ctx context.Context, messageId MessageId, params *CreateMessageParams, body CreateMessageJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error) {
	rsp, err := c.CreateMessage(ctx, messageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageResponse(rsp)
}

// DeleteMessageAttemptsWithBodyWithResponse request with arbitrary body returning *DeleteMessageAttemptsResponse
func (c *ClientWithResponses) DeleteMessageAttemptsWithBodyWithResponse(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteMessageAttemptsResponse, error) {
	rsp, err := c.DeleteMessageAttemptsWithBody(ctx, messageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageAttemptsResponse(rsp)
}

func (c *ClientWithResponses) DeleteMessageAttemptsWithResponse(ctx context.Context, messageId MessageId, params *DeleteMessageAttemptsParams, body DeleteMessageAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteMessageAttemptsResponse, error) {
	rsp, err := c.DeleteMessageAttempts(ctx, messageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageAttemptsResponse(rsp)
}

// ListMessageAttemptsWithResponse request returning *ListMessageAttemptsResponse
func (c *ClientWithResponses) ListMessageAttemptsWithResponse(ctx context.Context, messageId MessageId, params *ListMessageAttemptsParams, reqEditors ...RequestEditorFn) (*ListMessageAttemptsResponse, error) {
	rsp, err := c.ListMessageAttempts(ctx, messageId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessageAttemptsResponse(rsp)
}

// CreateMessagesAttemptsWithBodyWithResponse request with arbitrary body returning *CreateMessagesAttemptsResponse
func (c *ClientWithResponses) CreateMessagesAttemptsWithBodyWithResponse(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessagesAttemptsResponse, error) {
	rsp, err := c.CreateMessagesAttemptsWithBody(ctx, messageId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessagesAttemptsResponse(rsp)
}

func (c *ClientWithResponses) CreateMessagesAttemptsWithResponse(ctx context.Context, messageId MessageId, params *CreateMessagesAttemptsParams, body CreateMessagesAttemptsJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMessagesAttemptsResponse, error) {
	rsp, err := c.CreateMessagesAttempts(ctx, messageId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessagesAttemptsResponse(rsp)
}

// GetStatsWithResponse request returning *GetStatsResponse
func (c *ClientWithResponses) GetStatsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetStatsResponse, error) {
	rsp, err := c.GetStats(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetStatsResponse(rsp)
}

// ParseDeleteAttemptsResponse parses an HTTP response from a DeleteAttemptsWithResponse call
func ParseDeleteAttemptsResponse(rsp *http.Response) (*DeleteAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListAttemptsResponse parses an HTTP response from a ListAttemptsWithResponse call
func ParseListAttemptsResponse(rsp *http.Response) (*ListAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAttemptsResponse parses an HTTP response from a CreateAttemptsWithResponse call
func ParseCreateAttemptsResponse(rsp *http.Response) (*CreateAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDeleteAttemptResponse parses an HTTP response from a DeleteAttemptWithResponse call
func ParseDeleteAttemptResponse(rsp *http.Response) (*DeleteAttemptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAttemptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAttemptResponse parses an HTTP response from a GetAttemptWithResponse call
func ParseGetAttemptResponse(rsp *http.Response) (*GetAttemptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAttemptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Attempt
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAttemptResponse parses an HTTP response from a CreateAttemptWithResponse call
func ParseCreateAttemptResponse(rsp *http.Response) (*CreateAttemptResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAttemptResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ErrorOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDisableEndpointsResponse parses an HTTP response from a DisableEndpointsWithResponse call
func ParseDisableEndpointsResponse(rsp *http.Response) (*DisableEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DisableEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListEndpointsResponse parses an HTTP response from a ListEndpointsWithResponse call
func ParseListEndpointsResponse(rsp *http.Response) (*ListEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EndpointList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEndpointsResponse parses an HTTP response from a CreateEndpointsWithResponse call
func ParseCreateEndpointsResponse(rsp *http.Response) (*CreateEndpointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEndpointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteEndpointResponse parses an HTTP response from a DeleteEndpointWithResponse call
func ParseDeleteEndpointResponse(rsp *http.Response) (*DeleteEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetEndpointResponse parses an HTTP response from a GetEndpointWithResponse call
func ParseGetEndpointResponse(rsp *http.Response) (*GetEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Endpoint
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateEndpointResponse parses an HTTP response from a UpdateEndpointWithResponse call
func ParseUpdateEndpointResponse(rsp *http.Response) (*UpdateEndpointResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateEndpointResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest ErrorOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	}

	return response, nil
}

// ParseDeleteEndpointAttemptsResponse parses an HTTP response from a DeleteEndpointAttemptsWithResponse call
func ParseDeleteEndpointAttemptsResponse(rsp *http.Response) (*DeleteEndpointAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteEndpointAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListEndpointAttemprResponse parses an HTTP response from a ListEndpointAttemprWithResponse call
func ParseListEndpointAttemprResponse(rsp *http.Response) (*ListEndpointAttemprResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEndpointAttemprResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateEndpointAttemptsResponse parses an HTTP response from a CreateEndpointAttemptsWithResponse call
func ParseCreateEndpointAttemptsResponse(rsp *http.Response) (*CreateEndpointAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateEndpointAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetEndpointSecretResponse parses an HTTP response from a GetEndpointSecretWithResponse call
func ParseGetEndpointSecretResponse(rsp *http.Response) (*GetEndpointSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseRotateEndpointSecretResponse parses an HTTP response from a RotateEndpointSecretWithResponse call
func ParseRotateEndpointSecretResponse(rsp *http.Response) (*RotateEndpointSecretResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RotateEndpointSecretResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ErrorOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetEndpointStatsResponse parses an HTTP response from a GetEndpointStatsWithResponse call
func ParseGetEndpointStatsResponse(rsp *http.Response) (*GetEndpointStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetEndpointStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatisticsOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListEventTypesResponse parses an HTTP response from a ListEventTypesWithResponse call
func ParseListEventTypesResponse(rsp *http.Response) (*ListEventTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListEventTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EventTypeList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseJwksResponse parses an HTTP response from a JwksWithResponse call
func ParseJwksResponse(rsp *http.Response) (*JwksResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &JwksResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMessagesResponse parses an HTTP response from a DeleteMessagesWithResponse call
func ParseDeleteMessagesResponse(rsp *http.Response) (*DeleteMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListMessagesResponse parses an HTTP response from a ListMessagesWithResponse call
func ParseListMessagesResponse(rsp *http.Response) (*ListMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MessageList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMessagesResponse parses an HTTP response from a CreateMessagesWithResponse call
func ParseCreateMessagesResponse(rsp *http.Response) (*CreateMessagesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessagesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseDeleteMessageResponse parses an HTTP response from a DeleteMessageWithResponse call
func ParseDeleteMessageResponse(rsp *http.Response) (*DeleteMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMessageResponse parses an HTTP response from a GetMessageWithResponse call
func ParseGetMessageResponse(rsp *http.Response) (*GetMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Message
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMessageResponse parses an HTTP response from a CreateMessageWithResponse call
func ParseCreateMessageResponse(rsp *http.Response) (*CreateMessageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ErrorOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMessageAttemptsResponse parses an HTTP response from a DeleteMessageAttemptsWithResponse call
func ParseDeleteMessageAttemptsResponse(rsp *http.Response) (*DeleteMessageAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseListMessageAttemptsResponse parses an HTTP response from a ListMessageAttemptsWithResponse call
func ParseListMessageAttemptsResponse(rsp *http.Response) (*ListMessageAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessageAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AttemptList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMessagesAttemptsResponse parses an HTTP response from a CreateMessagesAttemptsWithResponse call
func ParseCreateMessagesAttemptsResponse(rsp *http.Response) (*CreateMessagesAttemptsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessagesAttemptsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ErrorList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseGetStatsResponse parses an HTTP response from a GetStatsWithResponse call
func ParseGetStatsResponse(rsp *http.Response) (*GetStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest StatisticsOut
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Expire or Delete Message Attempts
	// (DELETE /attempts)
	DeleteAttempts(w http.ResponseWriter, r *http.Request, params DeleteAttemptsParams)
	// List Message Attempts
	// (GET /attempts)
	ListAttempts(w http.ResponseWriter, r *http.Request, params ListAttemptsParams)
	// Send or Retry Message Attempts
	// (POST /attempts)
	CreateAttempts(w http.ResponseWriter, r *http.Request, params CreateAttemptsParams)
	// Expire or Delete Message Attempt
	// (DELETE /attempts/{attemptId})
	DeleteAttempt(w http.ResponseWriter, r *http.Request, attemptId AttemptId, params DeleteAttemptParams)
	// Get Attempt Details
	// (GET /attempts/{attemptId})
	GetAttempt(w http.ResponseWriter, r *http.Request, attemptId AttemptId)
	// Send or Retry Message Attempt
	// (POST /attempts/{attemptId})
	CreateAttempt(w http.ResponseWriter, r *http.Request, attemptId AttemptId, params CreateAttemptParams)
	// Disable or Delete Endpoints
	// (DELETE /endpoints)
	DisableEndpoints(w http.ResponseWriter, r *http.Request, params DisableEndpointsParams)
	// List Endpoints
	// (GET /endpoints)
	ListEndpoints(w http.ResponseWriter, r *http.Request, params ListEndpointsParams)
	// Register Endpoints
	// (POST /endpoints)
	CreateEndpoints(w http.ResponseWriter, r *http.Request)
	// Disable or Delete Endpoint
	// (DELETE /endpoints/{endpointId})
	DeleteEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteEndpointParams)
	// Get Endpoint Configuration
	// (GET /endpoints/{endpointId})
	GetEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId)
	// Update Endpoint Configuration
	// (PATCH /endpoints/{endpointId})
	UpdateEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId)
	// Expire or Delete Endpoint Message Attempts
	// (DELETE /endpoints/{endpointId}/attempts)
	DeleteEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteEndpointAttemptsParams)
	// List Endpoint Attempts
	// (GET /endpoints/{endpointId}/attempts)
	ListEndpointAttempr(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListEndpointAttemprParams)
	// Send or Retry Endpoint Message Attempts
	// (POST /endpoints/{endpointId}/attempts)
	CreateEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params CreateEndpointAttemptsParams)
	// Get Endpoint Secret
	// (GET /endpoints/{endpointId}/secret)
	GetEndpointSecret(w http.ResponseWriter, r *http.Request, endpointId EndpointId)

	// (POST /endpoints/{endpointId}/secret)
	RotateEndpointSecret(w http.ResponseWriter, r *http.Request, endpointId EndpointId)
	// Get Endpoint Statistics
	// (GET /endpoints/{endpointId}/stats)
	GetEndpointStats(w http.ResponseWriter, r *http.Request, endpointId EndpointId)
	// List Event Types
	// (GET /event-types)
	ListEventTypes(w http.ResponseWriter, r *http.Request, params ListEventTypesParams)
	// Health Status
	// (GET /health)
	GetHealth(w http.ResponseWriter, r *http.Request)
	// JSON Web Key Set
	// (GET /jwks.json)
	Jwks(w http.ResponseWriter, r *http.Request)
	// Expire or Delete Endpoint Messages
	// (DELETE /messages)
	DeleteMessages(w http.ResponseWriter, r *http.Request, params DeleteMessagesParams)
	// List Messages
	// (GET /messages)
	ListMessages(w http.ResponseWriter, r *http.Request, params ListMessagesParams)
	// Send or Resend Messages
	// (POST /messages)
	CreateMessages(w http.ResponseWriter, r *http.Request, params CreateMessagesParams)
	// Expire or Delete Message
	// (DELETE /messages/{messageId})
	DeleteMessage(w http.ResponseWriter, r *http.Request, messageId MessageId, params DeleteMessageParams)
	// Get Message
	// (GET /messages/{messageId})
	GetMessage(w http.ResponseWriter, r *http.Request, messageId MessageId)
	// Send or Retry Message
	// (POST /messages/{messageId})
	CreateMessage(w http.ResponseWriter, r *http.Request, messageId MessageId, params CreateMessageParams)
	// Expire or Delete Message's Attempts
	// (DELETE /messages/{messageId}/attempts)
	DeleteMessageAttempts(w http.ResponseWriter, r *http.Request, messageId MessageId, params DeleteMessageAttemptsParams)
	// List Message Attempts
	// (GET /messages/{messageId}/attempts)
	ListMessageAttempts(w http.ResponseWriter, r *http.Request, messageId MessageId, params ListMessageAttemptsParams)
	// Send or Retry Message's Attempts
	// (POST /messages/{messageId}/attempts)
	CreateMessagesAttempts(w http.ResponseWriter, r *http.Request, messageId MessageId, params CreateMessagesAttemptsParams)
	// General Statistics
	// (GET /stats)
	GetStats(w http.ResponseWriter, r *http.Request)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Expire or Delete Message Attempts
// (DELETE /attempts)
func (_ Unimplemented) DeleteAttempts(w http.ResponseWriter, r *http.Request, params DeleteAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Message Attempts
// (GET /attempts)
func (_ Unimplemented) ListAttempts(w http.ResponseWriter, r *http.Request, params ListAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send or Retry Message Attempts
// (POST /attempts)
func (_ Unimplemented) CreateAttempts(w http.ResponseWriter, r *http.Request, params CreateAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expire or Delete Message Attempt
// (DELETE /attempts/{attemptId})
func (_ Unimplemented) DeleteAttempt(w http.ResponseWriter, r *http.Request, attemptId AttemptId, params DeleteAttemptParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Attempt Details
// (GET /attempts/{attemptId})
func (_ Unimplemented) GetAttempt(w http.ResponseWriter, r *http.Request, attemptId AttemptId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send or Retry Message Attempt
// (POST /attempts/{attemptId})
func (_ Unimplemented) CreateAttempt(w http.ResponseWriter, r *http.Request, attemptId AttemptId, params CreateAttemptParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disable or Delete Endpoints
// (DELETE /endpoints)
func (_ Unimplemented) DisableEndpoints(w http.ResponseWriter, r *http.Request, params DisableEndpointsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Endpoints
// (GET /endpoints)
func (_ Unimplemented) ListEndpoints(w http.ResponseWriter, r *http.Request, params ListEndpointsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Register Endpoints
// (POST /endpoints)
func (_ Unimplemented) CreateEndpoints(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Disable or Delete Endpoint
// (DELETE /endpoints/{endpointId})
func (_ Unimplemented) DeleteEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteEndpointParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Endpoint Configuration
// (GET /endpoints/{endpointId})
func (_ Unimplemented) GetEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Endpoint Configuration
// (PATCH /endpoints/{endpointId})
func (_ Unimplemented) UpdateEndpoint(w http.ResponseWriter, r *http.Request, endpointId EndpointId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expire or Delete Endpoint Message Attempts
// (DELETE /endpoints/{endpointId}/attempts)
func (_ Unimplemented) DeleteEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params DeleteEndpointAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Endpoint Attempts
// (GET /endpoints/{endpointId}/attempts)
func (_ Unimplemented) ListEndpointAttempr(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params ListEndpointAttemprParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send or Retry Endpoint Message Attempts
// (POST /endpoints/{endpointId}/attempts)
func (_ Unimplemented) CreateEndpointAttempts(w http.ResponseWriter, r *http.Request, endpointId EndpointId, params CreateEndpointAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Endpoint Secret
// (GET /endpoints/{endpointId}/secret)
func (_ Unimplemented) GetEndpointSecret(w http.ResponseWriter, r *http.Request, endpointId EndpointId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (POST /endpoints/{endpointId}/secret)
func (_ Unimplemented) RotateEndpointSecret(w http.ResponseWriter, r *http.Request, endpointId EndpointId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Endpoint Statistics
// (GET /endpoints/{endpointId}/stats)
func (_ Unimplemented) GetEndpointStats(w http.ResponseWriter, r *http.Request, endpointId EndpointId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Event Types
// (GET /event-types)
func (_ Unimplemented) ListEventTypes(w http.ResponseWriter, r *http.Request, params ListEventTypesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Health Status
// (GET /health)
func (_ Unimplemented) GetHealth(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// JSON Web Key Set
// (GET /jwks.json)
func (_ Unimplemented) Jwks(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expire or Delete Endpoint Messages
// (DELETE /messages)
func (_ Unimplemented) DeleteMessages(w http.ResponseWriter, r *http.Request, params DeleteMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Messages
// (GET /messages)
func (_ Unimplemented) ListMessages(w http.ResponseWriter, r *http.Request, params ListMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send or Resend Messages
// (POST /messages)
func (_ Unimplemented) CreateMessages(w http.ResponseWriter, r *http.Request, params CreateMessagesParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expire or Delete Message
// (DELETE /messages/{messageId})
func (_ Unimplemented) DeleteMessage(w http.ResponseWriter, r *http.Request, messageId MessageId, params DeleteMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Message
// (GET /messages/{messageId})
func (_ Unimplemented) GetMessage(w http.ResponseWriter, r *http.Request, messageId MessageId) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send or Retry Message
// (POST /messages/{messageId})
func (_ Unimplemented) CreateMessage(w http.ResponseWriter, r *http.Request, messageId MessageId, params CreateMessageParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Expire or Delete Message's Attempts
// (DELETE /messages/{messageId}/attempts)
func (_ Unimplemented) DeleteMessageAttempts(w http.ResponseWriter, r *http.Request, messageId MessageId, params DeleteMessageAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Message Attempts
// (GET /messages/{messageId}/attempts)
func (_ Unimplemented) ListMessageAttempts(w http.ResponseWriter, r *http.Request, messageId MessageId, params ListMessageAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Send or Retry Message's Attempts
// (POST /messages/{messageId}/attempts)
func (_ Unimplemented) CreateMessagesAttempts(w http.ResponseWriter, r *http.Request, messageId MessageId, params CreateMessagesAttemptsParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// General Statistics
// (GET /stats)
func (_ Unimplemented) GetStats(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// DeleteAttempts operation middleware
func (siw *ServerInterfaceWrapper) DeleteAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAttemptsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAttempts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListAttempts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAttempts operation middleware
func (siw *ServerInterfaceWrapper) CreateAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAttemptsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAttempts(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteAttempt operation middleware
func (siw *ServerInterfaceWrapper) DeleteAttempt(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithOptions("simple", "attemptId", chi.URLParam(r, "attemptId"), &attemptId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteAttemptParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAttempt(w, r, attemptId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetAttempt operation middleware
func (siw *ServerInterfaceWrapper) GetAttempt(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithOptions("simple", "attemptId", chi.URLParam(r, "attemptId"), &attemptId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAttempt(w, r, attemptId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateAttempt operation middleware
func (siw *ServerInterfaceWrapper) CreateAttempt(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "attemptId" -------------
	var attemptId AttemptId

	err = runtime.BindStyledParameterWithOptions("simple", "attemptId", chi.URLParam(r, "attemptId"), &attemptId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "attemptId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateAttemptParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateAttempt(w, r, attemptId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DisableEndpoints operation middleware
func (siw *ServerInterfaceWrapper) DisableEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DisableEndpointsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DisableEndpoints(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEndpoints operation middleware
func (siw *ServerInterfaceWrapper) ListEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEndpointsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "reverse" -------------

	err = runtime.BindQueryParameter("form", true, false, "reverse", r.URL.Query(), &params.Reverse)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reverse", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEndpoints(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEndpoints operation middleware
func (siw *ServerInterfaceWrapper) CreateEndpoints(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEndpoints(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEndpoint operation middleware
func (siw *ServerInterfaceWrapper) DeleteEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEndpointParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEndpoint(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEndpoint operation middleware
func (siw *ServerInterfaceWrapper) GetEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEndpoint(w, r, endpointId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// UpdateEndpoint operation middleware
func (siw *ServerInterfaceWrapper) UpdateEndpoint(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateEndpoint(w, r, endpointId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteEndpointAttempts operation middleware
func (siw *ServerInterfaceWrapper) DeleteEndpointAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteEndpointAttemptsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteEndpointAttempts(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEndpointAttempr operation middleware
func (siw *ServerInterfaceWrapper) ListEndpointAttempr(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEndpointAttemprParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "reverse" -------------

	err = runtime.BindQueryParameter("form", true, false, "reverse", r.URL.Query(), &params.Reverse)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reverse", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEndpointAttempr(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateEndpointAttempts operation middleware
func (siw *ServerInterfaceWrapper) CreateEndpointAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateEndpointAttemptsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateEndpointAttempts(w, r, endpointId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEndpointSecret operation middleware
func (siw *ServerInterfaceWrapper) GetEndpointSecret(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEndpointSecret(w, r, endpointId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// RotateEndpointSecret operation middleware
func (siw *ServerInterfaceWrapper) RotateEndpointSecret(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.RotateEndpointSecret(w, r, endpointId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetEndpointStats operation middleware
func (siw *ServerInterfaceWrapper) GetEndpointStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "endpointId" -------------
	var endpointId EndpointId

	err = runtime.BindStyledParameterWithOptions("simple", "endpointId", chi.URLParam(r, "endpointId"), &endpointId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endpointId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetEndpointStats(w, r, endpointId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListEventTypes operation middleware
func (siw *ServerInterfaceWrapper) ListEventTypes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListEventTypesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "reverse" -------------

	err = runtime.BindQueryParameter("form", true, false, "reverse", r.URL.Query(), &params.Reverse)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reverse", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListEventTypes(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetHealth operation middleware
func (siw *ServerInterfaceWrapper) GetHealth(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetHealth(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// Jwks operation middleware
func (siw *ServerInterfaceWrapper) Jwks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Jwks(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMessages operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMessagesParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessages operation middleware
func (siw *ServerInterfaceWrapper) ListMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessagesParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "reverse" -------------

	err = runtime.BindQueryParameter("form", true, false, "reverse", r.URL.Query(), &params.Reverse)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reverse", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessages operation middleware
func (siw *ServerInterfaceWrapper) CreateMessages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMessagesParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessages(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMessage operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId MessageId

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMessageParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMessage(w, r, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetMessage operation middleware
func (siw *ServerInterfaceWrapper) GetMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId MessageId

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMessage(w, r, messageId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessage operation middleware
func (siw *ServerInterfaceWrapper) CreateMessage(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId MessageId

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMessageParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessage(w, r, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteMessageAttempts operation middleware
func (siw *ServerInterfaceWrapper) DeleteMessageAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId MessageId

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteMessageAttemptsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteMessageAttempts(w, r, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// ListMessageAttempts operation middleware
func (siw *ServerInterfaceWrapper) ListMessageAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId MessageId

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageAttemptsParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", r.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cursor", Err: err})
		return
	}

	// ------------- Optional query parameter "reverse" -------------

	err = runtime.BindQueryParameter("form", true, false, "reverse", r.URL.Query(), &params.Reverse)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "reverse", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListMessageAttempts(w, r, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// CreateMessagesAttempts operation middleware
func (siw *ServerInterfaceWrapper) CreateMessagesAttempts(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "messageId" -------------
	var messageId MessageId

	err = runtime.BindStyledParameterWithOptions("simple", "messageId", chi.URLParam(r, "messageId"), &messageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "messageId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params CreateMessagesAttemptsParams

	// ------------- Optional query parameter "force" -------------

	err = runtime.BindQueryParameter("form", true, false, "force", r.URL.Query(), &params.Force)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "force", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateMessagesAttempts(w, r, messageId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetStats operation middleware
func (siw *ServerInterfaceWrapper) GetStats(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetStats(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/attempts", wrapper.DeleteAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/attempts", wrapper.ListAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/attempts", wrapper.CreateAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/attempts/{attemptId}", wrapper.DeleteAttempt)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/attempts/{attemptId}", wrapper.GetAttempt)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/attempts/{attemptId}", wrapper.CreateAttempt)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/endpoints", wrapper.DisableEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints", wrapper.ListEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/endpoints", wrapper.CreateEndpoints)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/endpoints/{endpointId}", wrapper.DeleteEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}", wrapper.GetEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Patch(options.BaseURL+"/endpoints/{endpointId}", wrapper.UpdateEndpoint)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/endpoints/{endpointId}/attempts", wrapper.DeleteEndpointAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}/attempts", wrapper.ListEndpointAttempr)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/endpoints/{endpointId}/attempts", wrapper.CreateEndpointAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}/secret", wrapper.GetEndpointSecret)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/endpoints/{endpointId}/secret", wrapper.RotateEndpointSecret)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/endpoints/{endpointId}/stats", wrapper.GetEndpointStats)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/event-types", wrapper.ListEventTypes)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/health", wrapper.GetHealth)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/jwks.json", wrapper.Jwks)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/messages", wrapper.DeleteMessages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages", wrapper.ListMessages)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages", wrapper.CreateMessages)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/messages/{messageId}", wrapper.DeleteMessage)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages/{messageId}", wrapper.GetMessage)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages/{messageId}", wrapper.CreateMessage)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/messages/{messageId}/attempts", wrapper.DeleteMessageAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/messages/{messageId}/attempts", wrapper.ListMessageAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/messages/{messageId}/attempts", wrapper.CreateMessagesAttempts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/stats", wrapper.GetStats)
	})

	return r
}
