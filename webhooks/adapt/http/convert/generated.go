// Code generated by github.com/jmattheis/goverter, DO NOT EDIT.
//go:build !goverter

package convert

import (
	"time"
	v1 "woh/webhooks/adapt/http/v1"
	queries "woh/webhooks/provide/repo/queries"
)

type ApplicationConverterImpl struct{}

func (c *ApplicationConverterImpl) Created(source []queries.CreateApplicationsRow) []v1.Application {
	var webhooksv1ApplicationList []v1.Application
	if source != nil {
		webhooksv1ApplicationList = make([]v1.Application, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1ApplicationList[i] = c.CreatedItem(source[i])
		}
	}
	return webhooksv1ApplicationList
}
func (c *ApplicationConverterImpl) CreatedItem(source queries.CreateApplicationsRow) v1.Application {
	var webhooksv1Application v1.Application
	webhooksv1Application.CreatedAt = TimeToString(source.CreatedAt)
	webhooksv1Application.Id = source.Uid
	pString := source.Name
	webhooksv1Application.Name = &pString
	pInt32 := source.RateLimit
	webhooksv1Application.RateLimit = &pInt32
	return webhooksv1Application
}
func (c *ApplicationConverterImpl) Got(source []queries.GetApplicationsRow) []v1.Application {
	var webhooksv1ApplicationList []v1.Application
	if source != nil {
		webhooksv1ApplicationList = make([]v1.Application, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1ApplicationList[i] = c.GotItem(source[i])
		}
	}
	return webhooksv1ApplicationList
}
func (c *ApplicationConverterImpl) GotItem(source queries.GetApplicationsRow) v1.Application {
	var webhooksv1Application v1.Application
	webhooksv1Application.CreatedAt = TimeToString(source.CreatedAt)
	webhooksv1Application.Id = source.Uid
	pString := source.Name
	webhooksv1Application.Name = &pString
	var pInt32 *int32
	if source.RateLimit != nil {
		xint32 := *source.RateLimit
		pInt32 = &xint32
	}
	webhooksv1Application.RateLimit = pInt32
	return webhooksv1Application
}
func (c *ApplicationConverterImpl) List(source []queries.ListApplicationsRow) []v1.Application {
	var webhooksv1ApplicationList []v1.Application
	if source != nil {
		webhooksv1ApplicationList = make([]v1.Application, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1ApplicationList[i] = c.ListItem(source[i])
		}
	}
	return webhooksv1ApplicationList
}
func (c *ApplicationConverterImpl) ListItem(source queries.ListApplicationsRow) v1.Application {
	var webhooksv1Application v1.Application
	webhooksv1Application.CreatedAt = TimeToString(source.CreatedAt)
	webhooksv1Application.Id = source.Uid
	pString := source.Name
	webhooksv1Application.Name = &pString
	var pInt32 *int32
	if source.RateLimit != nil {
		xint32 := *source.RateLimit
		pInt32 = &xint32
	}
	webhooksv1Application.RateLimit = pInt32
	return webhooksv1Application
}
func (c *ApplicationConverterImpl) New(source []v1.NewApplication) []queries.NewApplication {
	var queriesNewApplicationList []queries.NewApplication
	if source != nil {
		queriesNewApplicationList = make([]queries.NewApplication, len(source))
		for i := 0; i < len(source); i++ {
			queriesNewApplicationList[i] = c.NewItem(source[i])
		}
	}
	return queriesNewApplicationList
}
func (c *ApplicationConverterImpl) NewItem(source v1.NewApplication) queries.NewApplication {
	var queriesNewApplication queries.NewApplication
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	queriesNewApplication.Name = xstring
	var pInt32 *int32
	if source.RateLimit != nil {
		xint32 := *source.RateLimit
		pInt32 = &xint32
	}
	queriesNewApplication.RateLimit = pInt32
	return queriesNewApplication
}

type EndpointConverterImpl struct{}

func (c *EndpointConverterImpl) Created(source []queries.CreateEndpointsRow) []v1.Endpoint {
	var webhooksv1EndpointList []v1.Endpoint
	if source != nil {
		webhooksv1EndpointList = make([]v1.Endpoint, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1EndpointList[i] = c.CreatedItem(source[i])
		}
	}
	return webhooksv1EndpointList
}
func (c *EndpointConverterImpl) CreatedItem(source queries.CreateEndpointsRow) v1.Endpoint {
	var webhooksv1Endpoint v1.Endpoint
	pString := source.Description
	webhooksv1Endpoint.Description = &pString
	webhooksv1Endpoint.Id = source.Uid
	pString2 := source.Name
	webhooksv1Endpoint.Name = &pString2
	pInt32 := source.RateLimit
	webhooksv1Endpoint.RateLimit = &pInt32
	webhooksv1Endpoint.Url = source.Url
	return webhooksv1Endpoint
}
func (c *EndpointConverterImpl) Got(source []queries.GetEndpointsRow) []v1.Endpoint {
	var webhooksv1EndpointList []v1.Endpoint
	if source != nil {
		webhooksv1EndpointList = make([]v1.Endpoint, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1EndpointList[i] = c.GotItem(source[i])
		}
	}
	return webhooksv1EndpointList
}
func (c *EndpointConverterImpl) GotItem(source queries.GetEndpointsRow) v1.Endpoint {
	var webhooksv1Endpoint v1.Endpoint
	pString := source.Description
	webhooksv1Endpoint.Description = &pString
	webhooksv1Endpoint.Id = source.Uid
	pString2 := source.Name
	webhooksv1Endpoint.Name = &pString2
	var pInt32 *int32
	if source.RateLimit != nil {
		xint32 := *source.RateLimit
		pInt32 = &xint32
	}
	webhooksv1Endpoint.RateLimit = pInt32
	webhooksv1Endpoint.Url = source.Url
	return webhooksv1Endpoint
}
func (c *EndpointConverterImpl) List(source []queries.ListEndpointsRow) []v1.Endpoint {
	var webhooksv1EndpointList []v1.Endpoint
	if source != nil {
		webhooksv1EndpointList = make([]v1.Endpoint, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1EndpointList[i] = c.ListItem(source[i])
		}
	}
	return webhooksv1EndpointList
}
func (c *EndpointConverterImpl) ListItem(source queries.ListEndpointsRow) v1.Endpoint {
	var webhooksv1Endpoint v1.Endpoint
	pString := source.Description
	webhooksv1Endpoint.Description = &pString
	webhooksv1Endpoint.Id = source.Uid
	pString2 := source.Name
	webhooksv1Endpoint.Name = &pString2
	var pInt32 *int32
	if source.RateLimit != nil {
		xint32 := *source.RateLimit
		pInt32 = &xint32
	}
	webhooksv1Endpoint.RateLimit = pInt32
	webhooksv1Endpoint.Url = source.Url
	return webhooksv1Endpoint
}
func (c *EndpointConverterImpl) New(source []v1.NewEndpoint) []queries.NewEndpoint {
	var queriesNewEndpointList []queries.NewEndpoint
	if source != nil {
		queriesNewEndpointList = make([]queries.NewEndpoint, len(source))
		for i := 0; i < len(source); i++ {
			queriesNewEndpointList[i] = c.NewItem(source[i])
		}
	}
	return queriesNewEndpointList
}
func (c *EndpointConverterImpl) NewItem(source v1.NewEndpoint) queries.NewEndpoint {
	var queriesNewEndpoint queries.NewEndpoint
	queriesNewEndpoint.Url = source.Url
	var xstring string
	if source.Name != nil {
		xstring = *source.Name
	}
	queriesNewEndpoint.Name = xstring
	var pInt32 *int32
	if source.RateLimit != nil {
		xint32 := *source.RateLimit
		pInt32 = &xint32
	}
	queriesNewEndpoint.RateLimit = pInt32
	var xstring2 string
	if source.Description != nil {
		xstring2 = *source.Description
	}
	queriesNewEndpoint.Description = xstring2
	var stringList []string
	if source.FilterTypes != nil {
		var stringList2 []string
		if (*source.FilterTypes) != nil {
			stringList2 = make([]string, len((*source.FilterTypes)))
			for i := 0; i < len((*source.FilterTypes)); i++ {
				stringList2[i] = (*source.FilterTypes)[i]
			}
		}
		stringList = stringList2
	}
	queriesNewEndpoint.FilterTypes = stringList
	var stringList3 []string
	if source.Channels != nil {
		var stringList4 []string
		if (*source.Channels) != nil {
			stringList4 = make([]string, len((*source.Channels)))
			for j := 0; j < len((*source.Channels)); j++ {
				stringList4[j] = (*source.Channels)[j]
			}
		}
		stringList3 = stringList4
	}
	queriesNewEndpoint.Channels = stringList3
	return queriesNewEndpoint
}

type MessageConverterImpl struct{}

func (c *MessageConverterImpl) Got(source []queries.CreateMessagesRow) []v1.Message {
	var webhooksv1MessageList []v1.Message
	if source != nil {
		webhooksv1MessageList = make([]v1.Message, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1MessageList[i] = c.GotItem(source[i])
		}
	}
	return webhooksv1MessageList
}
func (c *MessageConverterImpl) GotItem(source queries.CreateMessagesRow) v1.Message {
	var webhooksv1Message v1.Message
	webhooksv1Message.CreatedAt = c.timeTimeToPString(source.CreatedAt)
	webhooksv1Message.Id = source.Uid
	webhooksv1Message.Payload = source.Payload
	return webhooksv1Message
}
func (c *MessageConverterImpl) List(source []queries.ListMessagesRow) []v1.Message {
	var webhooksv1MessageList []v1.Message
	if source != nil {
		webhooksv1MessageList = make([]v1.Message, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1MessageList[i] = c.ListItem(source[i])
		}
	}
	return webhooksv1MessageList
}
func (c *MessageConverterImpl) ListItem(source queries.ListMessagesRow) v1.Message {
	var webhooksv1Message v1.Message
	webhooksv1Message.CreatedAt = c.timeTimeToPString(source.CreatedAt)
	webhooksv1Message.Id = source.Uid
	webhooksv1Message.Payload = source.Payload
	return webhooksv1Message
}
func (c *MessageConverterImpl) New(source []v1.NewMessage) []queries.NewMessage {
	var queriesNewMessageList []queries.NewMessage
	if source != nil {
		queriesNewMessageList = make([]queries.NewMessage, len(source))
		for i := 0; i < len(source); i++ {
			queriesNewMessageList[i] = c.NewItem(source[i])
		}
	}
	return queriesNewMessageList
}
func (c *MessageConverterImpl) NewItem(source v1.NewMessage) queries.NewMessage {
	var queriesNewMessage queries.NewMessage
	var xstring string
	if source.Payload != nil {
		xstring = *source.Payload
	}
	queriesNewMessage.Payload = xstring
	return queriesNewMessage
}
func (c *MessageConverterImpl) timeTimeToPString(source time.Time) *string {
	xstring := TimeToString(source)
	return &xstring
}

type SecretConverterImpl struct{}

func (c *SecretConverterImpl) Created(source []queries.CreateSecretsRow) []v1.Secret {
	var webhooksv1SecretList []v1.Secret
	if source != nil {
		webhooksv1SecretList = make([]v1.Secret, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1SecretList[i] = c.CreatedItem(source[i])
		}
	}
	return webhooksv1SecretList
}
func (c *SecretConverterImpl) CreatedItem(source queries.CreateSecretsRow) v1.Secret {
	var webhooksv1Secret v1.Secret
	webhooksv1Secret.Id = source.Uid
	return webhooksv1Secret
}
func (c *SecretConverterImpl) Got(source []queries.GetSecretsRow) []v1.Secret {
	var webhooksv1SecretList []v1.Secret
	if source != nil {
		webhooksv1SecretList = make([]v1.Secret, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1SecretList[i] = c.GotItem(source[i])
		}
	}
	return webhooksv1SecretList
}
func (c *SecretConverterImpl) GotItem(source queries.GetSecretsRow) v1.Secret {
	var webhooksv1Secret v1.Secret
	webhooksv1Secret.Id = source.Uid
	return webhooksv1Secret
}
func (c *SecretConverterImpl) List(source []queries.ListSecretsRow) []v1.Secret {
	var webhooksv1SecretList []v1.Secret
	if source != nil {
		webhooksv1SecretList = make([]v1.Secret, len(source))
		for i := 0; i < len(source); i++ {
			webhooksv1SecretList[i] = c.ListItem(source[i])
		}
	}
	return webhooksv1SecretList
}
func (c *SecretConverterImpl) ListItem(source queries.ListSecretsRow) v1.Secret {
	var webhooksv1Secret v1.Secret
	webhooksv1Secret.Id = source.Uid
	return webhooksv1Secret
}
func (c *SecretConverterImpl) New(source []v1.NewSecret) []queries.NewSecret {
	var queriesNewSecretList []queries.NewSecret
	if source != nil {
		queriesNewSecretList = make([]queries.NewSecret, len(source))
		for i := 0; i < len(source); i++ {
			queriesNewSecretList[i] = c.NewItem(source[i])
		}
	}
	return queriesNewSecretList
}
func (c *SecretConverterImpl) NewItem(source v1.NewSecret) queries.NewSecret {
	var queriesNewSecret queries.NewSecret
	_ = source
	return queriesNewSecret
}
