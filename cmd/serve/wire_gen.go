// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package serve

import (
	"github.com/alexedwards/scs/v2"
	"woh/package/actor"
	"woh/package/actor/sql/pgx"
	"woh/package/actor/third/gps"
	"woh/package/actor/third/gps/sub"
	"woh/webhooks/adapt/cron"
	"woh/webhooks/adapt/grpc"
	handle2 "woh/webhooks/adapt/grpc/handle"
	"woh/webhooks/adapt/http"
	"woh/webhooks/adapt/http/convert"
	"woh/webhooks/adapt/http/handle"
	"woh/webhooks/adapt/subs"
	"woh/webhooks/provide/repo"
	"woh/webhooks/provide/secrets"
)

// Injectors from wire.go:

func Adapters() actor.Actors {
	sessionManager := scs.New()
	options := pgx.ProvideOptions()
	provider := repo.New(options)
	secretsProvider := secrets.New()
	converterImpl := _wireConverterImplValue
	handler := &handle.Handler{
		Session: sessionManager,
		Repo:    provider,
		Secrets: secretsProvider,
		Convert: converterImpl,
	}
	httpOptions := http.Options{
		Handler: handler,
	}
	adapter := http.New(httpOptions)
	handleHandler := &handle2.Handler{
		Repo:    provider,
		Secrets: secretsProvider,
	}
	grpcOptions := grpc.Options{
		Handler: handleHandler,
	}
	grpcAdapter := grpc.New(grpcOptions)
	subsHandler := &subs.Handler{
		Repo:    provider,
		Secrets: secretsProvider,
	}
	subscriberConfig := sub.ProvideOptions()
	loggerAdapter := gps.ProvideLogger()
	subOptions := sub.Options{
		Config: subscriberConfig,
		Logger: loggerAdapter,
	}
	subsOptions := subs.Options{
		Handler: subsHandler,
		Options: subOptions,
	}
	subsAdapter := subs.New(subsOptions)
	workerId := cron.ProvideWorkerId()
	cronHandler := &cron.Handler{
		Id:   workerId,
		Repo: provider,
	}
	cronOptions := cron.Options{
		Handler: cronHandler,
	}
	cronAdapter := cron.New(cronOptions)
	actors := ChooseAdapters(adapter, grpcAdapter, subsAdapter, cronAdapter)
	return actors
}

var (
	_wireConverterImplValue = &convert.ConverterImpl{}
)
